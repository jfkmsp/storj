// Copyright (C) 2022 Storj Labs, Inc.
// See LICENSE for copying information.

package apigen

import (
	"fmt"
	"os"
	"reflect"
	"strings"

	"github.com/zeebo/errs"
)

// MustWriteTS writes generated TypeScript code into a file.
func (a *API) MustWriteTS(path string) {
	generated, err := a.generateTS()
	if err != nil {
		panic(errs.Wrap(err))
	}

	err = os.WriteFile(path, generated, 0644)
	if err != nil {
		panic(errs.Wrap(err))
	}
}

// generateTS generates client-side api code and returns an output.
func (a *API) generateTS() ([]byte, error) {
	var result string

	p := func(format string, a ...interface{}) {
		fmt.Printf(format+"\n", a...)
		result += fmt.Sprintf(format+"\n", a...)
	}

	p("// AUTOGENERATED BY private/apigen")
	p("// DO NOT EDIT.")
	p("")

	for _, group := range a.EndpointGroups {
		for _, method := range group.Endpoints {
			//p("printing types for endpoint %s", method.Name)
			if method.Request != nil {
				reqType := reflect.TypeOf(method.Request)
				EmitStruct(p, reqType)
			}
			if method.Response != nil {
				resType := reflect.TypeOf(method.Response)
				EmitStruct(p, resType)
			}
		}
	}

	return []byte(result), nil
}

func tsType(t reflect.Type) string {
	fmt.Println("reflect type")
	fmt.Println(t.Kind())
	switch t.Kind() {
	case reflect.String:
		return "string"
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32:
		return "number"
	case reflect.Struct:
		return t.Name()
	default:
		//panic("unhandled type: " + t.Name())

		return ""
	}
}
func EmitStruct(p func(format string, a ...interface{}), t reflect.Type) {
	if t.Kind() == reflect.Ptr {
		t = t.Elem()
	}
	/*
		if t.Kind() == reflect.Ptr {
			return EmitStruct(p)
		}
	*/
	if t.Kind() != reflect.Struct {
		// TODO: handle slices
		return
	}

	p("class %s {", t.Name())
	defer p("}")

	for i := 0; i < t.NumField(); i++ {
		field := t.Field(i)
		attributes := strings.Fields(field.Tag.Get("json"))
		if len(attributes) == 0 || attributes[0] == "" {
			panic(t.Name() + " missing json declaration")
		}
		if attributes[0] == "-" {
			continue
		}
		p("\t%s: %s;", attributes[0], tsType(field.Type))
	}

	p("\n\tstatic fromJSON(v unknown): %s {", t.Name())
	// TODO:
	p("\t}")
}
